name: CI & Release

on:
  push:
    branches: [ "**" ]
    tags: [ "v*.*.*" ]
  pull_request:

permissions:
  contents: write

env:
  APP_NAME: rsvpck
  CGO_ENABLED: "0"     

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: golang:1.23-alpine
    steps:
      - uses: actions/checkout@v4
      - name: Install build deps
        run: apk add --no-cache git
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            /root/.cache/go-build
            /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - name: Go vet & test (race)
        run: |
          go version
          go vet ./...
          go test ./... -race -count=1 -v

  build:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: test
    runs-on: ubuntu-latest
    container:
      image: golang:1.23-alpine
    strategy:
      fail-fast: false
      matrix:
        goos:   [ linux, windows ]
        goarch: [ amd64 ]
    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }
      - name: Install tools
        run: apk add --no-cache upx zip
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            /root/.cache/go-build
            /go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-
      - name: Version from tag
        id: ver
        run: echo "version=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"

      - name: Build ${{ matrix.goos }}-${{ matrix.goarch }}
        shell: sh
        run: |
          set -eu
          mkdir -p dist
          base="${APP_NAME}_${{ steps.ver.outputs.version }}_${{ matrix.goos }}_${{ matrix.goarch }}"
          bin="$base"
          [ "${{ matrix.goos }}" = "windows" ] && bin="${base}.exe"
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} \
            go build -trimpath -ldflags "-s -w -X main.version=${{ steps.ver.outputs.version }}" \
              -o "dist/${bin}" ./...

      - name: UPX compress
        shell: sh
        run: |
          set -eu
          base="${APP_NAME}_${{ steps.ver.outputs.version }}_${{ matrix.goos }}_${{ matrix.goarch }}"
          bin="$base"
          [ "${{ matrix.goos }}" = "windows" ] && bin="${base}.exe"
          if command -v upx >/dev/null 2>&1; then
            upx --best --lzma "dist/${bin}" || echo "UPX failed; keeping uncompressed"
            upx -t "dist/${bin}" || true
            ls -lh "dist/${bin}"
          fi

      - name: Package archives
        shell: sh
        run: |
          set -eu
          cd dist
          for f in *; do
            [ -f "$f" ] || continue
            case "$f" in
              *.exe) zip "${f%.exe}.zip" "$f" ;;
              *)     tar czf "${f}.tar.gz" "$f" ;;
            esac
          done
          sha256sum * > SHA256SUMS.txt
          ls -lh

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.goos }}-${{ matrix.goarch }}"
          path: dist/*
          if-no-files-found: error
          retention-days: 7

  release:
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    needs: build
    runs-on: ubuntu-latest
    container:
      image: golang:1.23-alpine
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: collected
          merge-multiple: true

      - name: Make consolidated checksums
        shell: sh
        run: |
          set -eu
          cd collected
          rm -f SHA256SUMS.txt
          sha256sum ${APP_NAME}_*_linux_*.tar.gz \
                    ${APP_NAME}_*_windows_*.zip \
                    ${APP_NAME}_*_windows_*.exe \
                    ${APP_NAME}_*_linux_amd64 \
            > SHA256SUMS.txt
          wc -l SHA256SUMS.txt
          ls -lh

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name:     ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
          fail_on_unmatched_files: false
          files: |
            collected/${{ env.APP_NAME }}_*_linux_amd64
            collected/${{ env.APP_NAME }}_*_linux_*.tar.gz
            collected/${{ env.APP_NAME }}_*_windows_*.zip
            collected/${{ env.APP_NAME }}_*_windows_*.exe
            collected/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
